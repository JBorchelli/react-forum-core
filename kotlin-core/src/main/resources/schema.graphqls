scalar BigInteger

schema {
    query: Query
    mutation: Mutation
}

type Group {
    id: ID!,
    name: String!,
    users: [User],
    categories[Category]
}

type User {
    id: ID!,
    username: String!,
    groups: [Group],
    discussions: [Discussion],
    posts: [Post]
}

type Category {
    id: ID!,
    title: String!,
    group: Group,
    discussions: [Discussion]
}

type Discussion {
    id: ID!,
    heading: String!,
    sub: String,
    category: Category,
    posts: [Post],
    user: User
}

type Post {
    id: ID!,
    content: String!,
    user: User,
    discussion: Discussion
}

type Query {
    groupsByUser: [Group],
    usersByGroup: [User],
    categoriesByGroup: [Category],
    discussionsByCategory: [Discussion],
    postsByDiscussion: [Post],
    discussionsByUser: [Discussion],
    postsByUser: [Post]
}

type Mutation {
    createGroup(name: String!): Group 
    updateGroupName(id: BigInteger!, name: String!): Group
    removeGroup(id: BigInteger!): BigInteger
    addUserToGroup(groupId: BigInteger!, userId: BigInteger!): Group
    RemoveUserFromGroup(groupId: BigInteger!, userId: BigInteger!): Group
    createUser(username: String!): User
    updateUsername(userId: BigInteger!, username: String!): User
    removeUser(userId: BigInteger!): BigInteger
    createCategory(title: String!, groupId: BigInteger!): Category
    updateCategoryTitle(categoryId: BigInteger!, title: String!): Category
    removeCategory(categoryId: BigInteger!): BigInteger
    createDiscussion(heading: String!, sub: String, categoryId: BigInteger!, userId: BigInteger!): Discussion
    updateDiscussion(discussionId: BigInteger!, heading: String, sub String): Discussion
    removeDiscussion(discussionId: BigInteger!): BigInteger
    createPost(content: String!, discussionId: BigInteger!, userId: BigInteger!): Post
    updatePost(postId: BigInteger!, content: String!): Post
    removePost(postId: BigInteger!): BigInteger
}